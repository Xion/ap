#!/bin/sh

# Script for preparing release bundles with the rush binary
#
# This essentially a wrapper script around fpm (https://github.com/jordansissel/fpm).
# Requires fpm to be installed first, which may in turn require Ruby with C headers.
#
# Refer to fpm's README for instructions.
#

# Package information
NAME='rush'
VERSION='0.1.0'
DESCRIPTON='Succinct & readable processing language'
URL='http://github.com/Xion/rush'
LICENSE='GPL v3'
MAINTAINER='Karol Kuczmarski'
# TODO(xion): share these between this script, Cargo.toml, and the argument parser
# (the last one probably requires custom build.rs)

CRATE_DIR='./crates/rush'
SOURCE_DIR="$CRATE_DIR/target/release"
BIN='rh'
LICENSE_FILE='./LICENSE'
OUTPUT_DIR="./release"

INSTALL_DIR='/usr/bin'


main() {
    [ -f ".gitignore" ] || fatal "Release script must be run from project's root!"

    require cargo
    require fpm

    log "Building the release binary..."
    cargo_build

    log "Creating release bundles..."
    ensure_output_dir
    prepare_deb_package
    prepare_rpm_package

    log "Release finished."
}


ensure_output_dir() {
    if [ ! -d "$OUTPUT_DIR" ]; then
        log "Creating output directory ($OUTPUT_DIR)..."
        mkdir -p "$OUTPUT_DIR"
    fi
}

cargo_build() {
    cargo build --release --manifest-path "$CRATE_DIR/Cargo.toml"
    if [ ! -f "${SOURCE_DIR}/$BIN" ]; then
        fatal "Failed to build the release binary, aborting."
    fi

    # strip the binary of debug symbols to reduce its size
    if exists strip; then
        strip "${SOURCE_DIR}/$BIN"
    else
        warn "'strip' not found, binary will retain debug symbols."
    fi

    # ensure a license file is available in the source directory
    cp --force --no-target-directory "$LICENSE_FILE" "$SOURCE_DIR/$LICENSE_FILE"
    # TODO(xion): include the license file in the final bundles
}


prepare_deb_package() {
    log "Preparing Debian package..."

    bundle deb --prefix "$INSTALL_DIR"
    if [ "$?" -ne 0 ]; then
        fatal "Failed to create Debian package."
    fi
}

prepare_rpm_package() {
    if ! exists rpm; then
        warn "`rpm` not found -- skipping creation of the RedHat package."
        return 1
    fi

    log "Preparing RedHat package..."

    bundle rpm --prefix "$INSTALL_DIR"
    if [ "$?" -ne 0 ]; then
        fatal "Failed to create RedHat package."
    fi
}

bundle() {
    # Create a release bundle by invoking `fpm` with common parameters
    local target="$1" ; shift

    local iteration=$(git rev-parse --short HEAD)  # Use Git SHA of HEAD as iteration.
    fpm --force --log error \
        --name "$NAME" --version "$VERSION" --iteration="$iteration" \
        --description="$DESCRIPTON" --license "$LICENSE" --url "$URL" \
        --maintainer "$MAINTAINER" --vendor '<unspecified>' \
        -s dir -t "$target" -C "$SOURCE_DIR" --package "${OUTPUT_DIR}/${NAME}.$target" \
        "$@" \
        "$BIN"
}


# General utility functions

exists() {
    which "$1" >/dev/null
}

require() {
    # Require for an external program to exist, abort the script if not found
    local prog="$1"
    local msg="${2-$prog not found, aborting.}"
    exists "$prog" || fatal "$msg\n"
}

fatal() {
    local fmt="$1" ; shift
    log "FATAL: $fmt" "$@"
    exit 1
}

warn() {
    local fmt="$1" ; shift
    log "WARN: $fmt" "$@"
}

log() {
    local fmt="$1" ; shift
    printf >&2 "\n>>> $fmt\n" "$@"
}


main "$@"
